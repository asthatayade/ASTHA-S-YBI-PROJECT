{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8939322,"sourceType":"datasetVersion","datasetId":5378683}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/e210asthatayade/ybi-project-submission?scriptVersionId=188053135\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"#Servo Prediction using Linear Regression","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:38:54.08015Z","iopub.execute_input":"2024-07-13T04:38:54.080559Z","iopub.status.idle":"2024-07-13T04:38:54.086086Z","shell.execute_reply.started":"2024-07-13T04:38:54.080525Z","shell.execute_reply":"2024-07-13T04:38:54.084127Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"#Objective:Developing a linear regression model that accurately predicts the behavior or position of a servo motor based on input features.","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:38:55.399871Z","iopub.execute_input":"2024-07-13T04:38:55.400272Z","iopub.status.idle":"2024-07-13T04:38:55.405365Z","shell.execute_reply.started":"2024-07-13T04:38:55.400232Z","shell.execute_reply":"2024-07-13T04:38:55.403934Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:09.349719Z","iopub.execute_input":"2024-07-13T04:39:09.350289Z","iopub.status.idle":"2024-07-13T04:39:09.356049Z","shell.execute_reply.started":"2024-07-13T04:39:09.350249Z","shell.execute_reply":"2024-07-13T04:39:09.354574Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"data= pd.read_csv('/kaggle/input/servo-ybi/Servo Mechanism.csv')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:11.375866Z","iopub.execute_input":"2024-07-13T04:39:11.376305Z","iopub.status.idle":"2024-07-13T04:39:11.397627Z","shell.execute_reply.started":"2024-07-13T04:39:11.376267Z","shell.execute_reply":"2024-07-13T04:39:11.396309Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#data describing","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:13.290519Z","iopub.execute_input":"2024-07-13T04:39:13.290902Z","iopub.status.idle":"2024-07-13T04:39:13.296009Z","shell.execute_reply.started":"2024-07-13T04:39:13.290871Z","shell.execute_reply":"2024-07-13T04:39:13.294724Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"data.head()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:14.299861Z","iopub.execute_input":"2024-07-13T04:39:14.300281Z","iopub.status.idle":"2024-07-13T04:39:14.321667Z","shell.execute_reply.started":"2024-07-13T04:39:14.30025Z","shell.execute_reply":"2024-07-13T04:39:14.320287Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"  Motor Screw  Pgain  Vgain  Class\n0     E     E      5      4      4\n1     B     D      6      5     11\n2     D     D      4      3      6\n3     B     A      3      2     48\n4     D     B      6      5      6","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Motor</th>\n      <th>Screw</th>\n      <th>Pgain</th>\n      <th>Vgain</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>E</td>\n      <td>E</td>\n      <td>5</td>\n      <td>4</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>D</td>\n      <td>6</td>\n      <td>5</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D</td>\n      <td>D</td>\n      <td>4</td>\n      <td>3</td>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>B</td>\n      <td>A</td>\n      <td>3</td>\n      <td>2</td>\n      <td>48</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D</td>\n      <td>B</td>\n      <td>6</td>\n      <td>5</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:16.215469Z","iopub.execute_input":"2024-07-13T04:39:16.215911Z","iopub.status.idle":"2024-07-13T04:39:16.242319Z","shell.execute_reply.started":"2024-07-13T04:39:16.215878Z","shell.execute_reply":"2024-07-13T04:39:16.241121Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"            Pgain       Vgain       Class\ncount  167.000000  167.000000  167.000000\nmean     4.155689    2.538922   21.173653\nstd      1.017770    1.369850   13.908038\nmin      3.000000    1.000000    1.000000\n25%      3.000000    1.000000   10.500000\n50%      4.000000    2.000000   18.000000\n75%      5.000000    4.000000   33.500000\nmax      6.000000    5.000000   51.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Pgain</th>\n      <th>Vgain</th>\n      <th>Class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>167.000000</td>\n      <td>167.000000</td>\n      <td>167.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>4.155689</td>\n      <td>2.538922</td>\n      <td>21.173653</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.017770</td>\n      <td>1.369850</td>\n      <td>13.908038</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>3.000000</td>\n      <td>1.000000</td>\n      <td>10.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>4.000000</td>\n      <td>2.000000</td>\n      <td>18.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>5.000000</td>\n      <td>4.000000</td>\n      <td>33.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>51.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"data.info()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:21.407923Z","iopub.execute_input":"2024-07-13T04:39:21.408318Z","iopub.status.idle":"2024-07-13T04:39:21.43251Z","shell.execute_reply.started":"2024-07-13T04:39:21.408289Z","shell.execute_reply":"2024-07-13T04:39:21.431296Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 167 entries, 0 to 166\nData columns (total 5 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   Motor   167 non-null    object\n 1   Screw   167 non-null    object\n 2   Pgain   167 non-null    int64 \n 3   Vgain   167 non-null    int64 \n 4   Class   167 non-null    int64 \ndtypes: int64(3), object(2)\nmemory usage: 6.6+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"#Data Preprocessing","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:49.100421Z","iopub.execute_input":"2024-07-13T04:39:49.100773Z","iopub.status.idle":"2024-07-13T04:39:49.105872Z","shell.execute_reply.started":"2024-07-13T04:39:49.100745Z","shell.execute_reply":"2024-07-13T04:39:49.1043Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"data.columns","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:25.069694Z","iopub.execute_input":"2024-07-13T04:39:25.070144Z","iopub.status.idle":"2024-07-13T04:39:25.077831Z","shell.execute_reply.started":"2024-07-13T04:39:25.070109Z","shell.execute_reply":"2024-07-13T04:39:25.07652Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Index(['Motor', 'Screw', 'Pgain', 'Vgain', 'Class'], dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"data[['Motor']].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:30.899903Z","iopub.execute_input":"2024-07-13T04:39:30.900333Z","iopub.status.idle":"2024-07-13T04:39:30.917467Z","shell.execute_reply.started":"2024-07-13T04:39:30.900299Z","shell.execute_reply":"2024-07-13T04:39:30.915909Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"Motor\nC        40\nA        36\nB        36\nE        33\nD        22\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data[['Screw']].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:39:53.930342Z","iopub.execute_input":"2024-07-13T04:39:53.930732Z","iopub.status.idle":"2024-07-13T04:39:53.944032Z","shell.execute_reply.started":"2024-07-13T04:39:53.930699Z","shell.execute_reply":"2024-07-13T04:39:53.94255Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Screw\nA        42\nB        35\nC        31\nD        30\nE        29\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"data.replace({'Motor':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:02.279659Z","iopub.execute_input":"2024-07-13T04:40:02.280063Z","iopub.status.idle":"2024-07-13T04:40:02.286499Z","shell.execute_reply.started":"2024-07-13T04:40:02.280016Z","shell.execute_reply":"2024-07-13T04:40:02.285018Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"data.replace({'Screw':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:04.799975Z","iopub.execute_input":"2024-07-13T04:40:04.800375Z","iopub.status.idle":"2024-07-13T04:40:04.806335Z","shell.execute_reply.started":"2024-07-13T04:40:04.800344Z","shell.execute_reply":"2024-07-13T04:40:04.805269Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"#Define Target Variable (y) and Feature Variables (X)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:08.45338Z","iopub.execute_input":"2024-07-13T04:40:08.453736Z","iopub.status.idle":"2024-07-13T04:40:08.459468Z","shell.execute_reply.started":"2024-07-13T04:40:08.453709Z","shell.execute_reply":"2024-07-13T04:40:08.458133Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"y = data['Class']","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:12.250989Z","iopub.execute_input":"2024-07-13T04:40:12.251395Z","iopub.status.idle":"2024-07-13T04:40:12.256705Z","shell.execute_reply.started":"2024-07-13T04:40:12.251365Z","shell.execute_reply":"2024-07-13T04:40:12.255337Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"y.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:13.772164Z","iopub.execute_input":"2024-07-13T04:40:13.772528Z","iopub.status.idle":"2024-07-13T04:40:13.781181Z","shell.execute_reply.started":"2024-07-13T04:40:13.7725Z","shell.execute_reply":"2024-07-13T04:40:13.779914Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"(167,)"},"metadata":{}}]},{"cell_type":"code","source":"y","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:18.551673Z","iopub.execute_input":"2024-07-13T04:40:18.55208Z","iopub.status.idle":"2024-07-13T04:40:18.560797Z","shell.execute_reply.started":"2024-07-13T04:40:18.552049Z","shell.execute_reply":"2024-07-13T04:40:18.559647Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"0       4\n1      11\n2       6\n3      48\n4       6\n       ..\n162    44\n163    40\n164    25\n165    44\n166    20\nName: Class, Length: 167, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X= data[['Motor','Screw','Pgain','Vgain']]","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:22.260008Z","iopub.execute_input":"2024-07-13T04:40:22.260426Z","iopub.status.idle":"2024-07-13T04:40:22.268442Z","shell.execute_reply.started":"2024-07-13T04:40:22.260395Z","shell.execute_reply":"2024-07-13T04:40:22.267286Z"},"trusted":true},"execution_count":23,"outputs":[]},{"cell_type":"code","source":"X.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:25.699515Z","iopub.execute_input":"2024-07-13T04:40:25.699897Z","iopub.status.idle":"2024-07-13T04:40:25.706741Z","shell.execute_reply.started":"2024-07-13T04:40:25.699864Z","shell.execute_reply":"2024-07-13T04:40:25.705521Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"(167, 4)"},"metadata":{}}]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:30.490016Z","iopub.execute_input":"2024-07-13T04:40:30.490414Z","iopub.status.idle":"2024-07-13T04:40:30.503169Z","shell.execute_reply.started":"2024-07-13T04:40:30.490383Z","shell.execute_reply":"2024-07-13T04:40:30.501846Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"     Motor  Screw  Pgain  Vgain\n0        4      4      5      4\n1        1      3      6      5\n2        3      3      4      3\n3        1      0      3      2\n4        3      1      6      5\n..     ...    ...    ...    ...\n162      1      2      3      2\n163      1      4      3      1\n164      2      3      4      3\n165      0      1      3      2\n166      0      0      6      5\n\n[167 rows x 4 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Motor</th>\n      <th>Screw</th>\n      <th>Pgain</th>\n      <th>Vgain</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4</td>\n      <td>4</td>\n      <td>5</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>3</td>\n      <td>6</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3</td>\n      <td>1</td>\n      <td>6</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>162</th>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>163</th>\n      <td>1</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>164</th>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>165</th>\n      <td>0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>166</th>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>5</td>\n    </tr>\n  </tbody>\n</table>\n<p>167 rows × 4 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#Train Test Split","metadata":{"execution":{"iopub.status.busy":"2024-07-12T14:53:40.643887Z","iopub.execute_input":"2024-07-12T14:53:40.644927Z","iopub.status.idle":"2024-07-12T14:53:40.649776Z","shell.execute_reply.started":"2024-07-12T14:53:40.644884Z","shell.execute_reply":"2024-07-12T14:53:40.648237Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:42.200276Z","iopub.execute_input":"2024-07-13T04:40:42.20064Z","iopub.status.idle":"2024-07-13T04:40:42.88539Z","shell.execute_reply.started":"2024-07-13T04:40:42.200613Z","shell.execute_reply":"2024-07-13T04:40:42.884141Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size =0.3 ,random_state =2529)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:46.05049Z","iopub.execute_input":"2024-07-13T04:40:46.050879Z","iopub.status.idle":"2024-07-13T04:40:46.061301Z","shell.execute_reply.started":"2024-07-13T04:40:46.05085Z","shell.execute_reply":"2024-07-13T04:40:46.060023Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"X_train.shape,X_test.shape,y_train.shape,y_test.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:50.850013Z","iopub.execute_input":"2024-07-13T04:40:50.850403Z","iopub.status.idle":"2024-07-13T04:40:50.857753Z","shell.execute_reply.started":"2024-07-13T04:40:50.850374Z","shell.execute_reply":"2024-07-13T04:40:50.856562Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"((116, 4), (51, 4), (116,), (51,))"},"metadata":{}}]},{"cell_type":"code","source":"#Modeling","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:54.470317Z","iopub.execute_input":"2024-07-13T04:40:54.470812Z","iopub.status.idle":"2024-07-13T04:40:54.476498Z","shell.execute_reply.started":"2024-07-13T04:40:54.470771Z","shell.execute_reply":"2024-07-13T04:40:54.475117Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:40:57.619716Z","iopub.execute_input":"2024-07-13T04:40:57.620133Z","iopub.status.idle":"2024-07-13T04:40:57.726179Z","shell.execute_reply.started":"2024-07-13T04:40:57.620097Z","shell.execute_reply":"2024-07-13T04:40:57.725134Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"lr = LinearRegression()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:07.54Z","iopub.execute_input":"2024-07-13T04:41:07.54041Z","iopub.status.idle":"2024-07-13T04:41:07.545472Z","shell.execute_reply.started":"2024-07-13T04:41:07.540381Z","shell.execute_reply":"2024-07-13T04:41:07.544282Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"code","source":"lr.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:08.869705Z","iopub.execute_input":"2024-07-13T04:41:08.870177Z","iopub.status.idle":"2024-07-13T04:41:08.902645Z","shell.execute_reply.started":"2024-07-13T04:41:08.870139Z","shell.execute_reply":"2024-07-13T04:41:08.901452Z"},"trusted":true},"execution_count":33,"outputs":[{"execution_count":33,"output_type":"execute_result","data":{"text/plain":"LinearRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#data prediction","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:13.909697Z","iopub.execute_input":"2024-07-13T04:41:13.910242Z","iopub.status.idle":"2024-07-13T04:41:13.915429Z","shell.execute_reply.started":"2024-07-13T04:41:13.910208Z","shell.execute_reply":"2024-07-13T04:41:13.914241Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"y_pred = lr.predict(X_test)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:15.060283Z","iopub.execute_input":"2024-07-13T04:41:15.060692Z","iopub.status.idle":"2024-07-13T04:41:15.068147Z","shell.execute_reply.started":"2024-07-13T04:41:15.060661Z","shell.execute_reply":"2024-07-13T04:41:15.06681Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"y_pred.shape","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:16.179293Z","iopub.execute_input":"2024-07-13T04:41:16.179682Z","iopub.status.idle":"2024-07-13T04:41:16.188207Z","shell.execute_reply.started":"2024-07-13T04:41:16.179647Z","shell.execute_reply":"2024-07-13T04:41:16.18691Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"(51,)"},"metadata":{}}]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:21.169477Z","iopub.execute_input":"2024-07-13T04:41:21.169886Z","iopub.status.idle":"2024-07-13T04:41:21.177319Z","shell.execute_reply.started":"2024-07-13T04:41:21.169852Z","shell.execute_reply":"2024-07-13T04:41:21.17612Z"},"trusted":true},"execution_count":37,"outputs":[{"execution_count":37,"output_type":"execute_result","data":{"text/plain":"array([24.55945258, 30.98765106, 18.54485477, 25.51524243, 38.56082023,\n       23.52007775, 11.61947065, 20.03335614, 40.60404401, 41.7009556 ,\n       13.66269443, 26.01242807, 16.50163099, 16.54663453, 21.92598051,\n       22.52570646, -5.46449561, 30.68912392, 32.7323477 ,  1.41282941,\n       33.97718702, 31.63543611, 33.52806048, 30.04133887, 19.38557109,\n        6.49364826, 28.5528375 , 17.04382017, 25.06611589,  3.50411229,\n       30.59606128, 23.67067716, 35.72188367, 32.08456265, 12.46018697,\n        3.6547117 , 23.47201865, 33.03087484, 17.49294672, 37.61450804,\n       27.54898855, 22.07657992, 11.51387478,  9.470651  , 30.53852451,\n       28.64590014, 33.67865989,  4.60102388, 24.1198037 , 21.13026773,\n       25.71390094])"},"metadata":{}}]},{"cell_type":"code","source":"#model evaluation","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:26.499566Z","iopub.execute_input":"2024-07-13T04:41:26.500313Z","iopub.status.idle":"2024-07-13T04:41:26.504596Z","shell.execute_reply.started":"2024-07-13T04:41:26.500274Z","shell.execute_reply":"2024-07-13T04:41:26.503493Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:27.679691Z","iopub.execute_input":"2024-07-13T04:41:27.680182Z","iopub.status.idle":"2024-07-13T04:41:27.685786Z","shell.execute_reply.started":"2024-07-13T04:41:27.680143Z","shell.execute_reply":"2024-07-13T04:41:27.684609Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"mean_squared_error(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:29.399936Z","iopub.execute_input":"2024-07-13T04:41:29.401001Z","iopub.status.idle":"2024-07-13T04:41:29.408656Z","shell.execute_reply.started":"2024-07-13T04:41:29.400952Z","shell.execute_reply":"2024-07-13T04:41:29.407139Z"},"trusted":true},"execution_count":40,"outputs":[{"execution_count":40,"output_type":"execute_result","data":{"text/plain":"66.03589175595563"},"metadata":{}}]},{"cell_type":"code","source":"r2_score(y_test,y_pred)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:36.729854Z","iopub.execute_input":"2024-07-13T04:41:36.730265Z","iopub.status.idle":"2024-07-13T04:41:36.738401Z","shell.execute_reply.started":"2024-07-13T04:41:36.730232Z","shell.execute_reply":"2024-07-13T04:41:36.736974Z"},"trusted":true},"execution_count":42,"outputs":[{"execution_count":42,"output_type":"execute_result","data":{"text/plain":"0.6807245170563927"},"metadata":{}}]},{"cell_type":"code","source":"#data visualization","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:32.829788Z","iopub.execute_input":"2024-07-13T04:41:32.830172Z","iopub.status.idle":"2024-07-13T04:41:32.834895Z","shell.execute_reply.started":"2024-07-13T04:41:32.830142Z","shell.execute_reply":"2024-07-13T04:41:32.833636Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test,y_pred)\nplt.xlabel('Actual')\nplt.ylabel('Predicted')\nplt.title(\"Actual vs Predicted\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:39.412192Z","iopub.execute_input":"2024-07-13T04:41:39.412582Z","iopub.status.idle":"2024-07-13T04:41:39.698933Z","shell.execute_reply.started":"2024-07-13T04:41:39.412552Z","shell.execute_reply":"2024-07-13T04:41:39.697546Z"},"trusted":true},"execution_count":43,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#Explanation: step 1-Import Libraries\n#step 1-Import Libraries(First, you need to import the necessary Python libraries.)\n#step 2-Load and Preprocess Data(Load your dataset and perform any necessary preprocessing steps.)\n#step 3-Spliting Data into Training and Testing Sets\n#step 4-Train the Linear Regression Model\n#step 5-Make Predictions\n#step 6-Evaluate the Model\n#step 7-Visualize the Results\n    ","metadata":{"execution":{"iopub.status.busy":"2024-07-13T04:41:43.749874Z","iopub.execute_input":"2024-07-13T04:41:43.750307Z","iopub.status.idle":"2024-07-13T04:41:43.755451Z","shell.execute_reply.started":"2024-07-13T04:41:43.750275Z","shell.execute_reply":"2024-07-13T04:41:43.75405Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}